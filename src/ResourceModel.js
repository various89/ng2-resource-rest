import { mapToModel } from './ResourceAction';
export function ResourceModelParams(params) {
    return function (target) {
        var providers = [];
        if (params) {
            providers = params.providers || [];
        }
        Reflect.defineMetadata('providers', providers, target);
    };
}
export var ResourceModel = (function () {
    function ResourceModel() {
        this.$primaryKey = 'id';
    }
    ResourceModel.create = function (data, commit) {
        if (data === void 0) { data = {}; }
        if (commit === void 0) { commit = true; }
        if (!this.resourceInstance) {
            console.error('You should first instantiate Resource by injecting.');
        }
        var result = mapToModel.bind(this.resourceInstance)(data, this);
        if (commit) {
            result = result.save();
        }
        return result;
    };
    ResourceModel.prototype.$fillFromObject = function (_object) {
        for (var propName in _object) {
            this[propName] = _object[propName];
        }
        return this;
    };
    ResourceModel.prototype.$getData = function () {
        var _object = {};
        for (var propName in this) {
            if (!(this[propName] instanceof Function) && !(propName.charAt(0) === '$')) {
                _object[propName] = this[propName];
            }
        }
        return _object;
    };
    ResourceModel.prototype.$save = function () {
        if (this[this.$primaryKey]) {
            this.$update();
        }
        else {
            this.$create();
        }
    };
    ResourceModel.prototype.$update = function () {
        this.$resource_method('update');
    };
    ResourceModel.prototype.$remove = function () {
        this.$resource_method('remove');
    };
    ResourceModel.prototype.$resource_method = function (method_name) {
        var _this = this;
        var _method = this.$resource[method_name];
        if (!_method) {
            console.error("Your Resource has no implemented " + method_name + " method.");
            return;
        }
        var data = (method_name === 'remove') ? { id: this[this.$primaryKey] } : this.$getData();
        var result = _method.bind(this.$resource)(data);
        this.$resolved = result.$resolved;
        this.$observable = result.$observable;
        this.$abortRequest = result.$abortRequest;
        this.$observable.subscribe(function (resp) {
            _this.$fillFromObject(resp.$getData());
        });
    };
    ResourceModel.prototype.$create = function () {
        this.$resource_method('create');
    };
    return ResourceModel;
}());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVzb3VyY2VNb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlJlc291cmNlTW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BSU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxrQkFBa0I7QUFJM0Msb0NBQW9DLE1BQWdDO0lBRWxFLE1BQU0sQ0FBQyxVQUFVLE1BQTJCO1FBQzFDLElBQUksU0FBUyxHQUFVLEVBQUUsQ0FBQztRQUMxQixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ1gsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDO1FBQ3JDLENBQUM7UUFFSyxPQUFRLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDaEUsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUdEO0lBQUE7UUFRRSxnQkFBVyxHQUFXLElBQUksQ0FBQztJQW9FN0IsQ0FBQztJQWpFUSxvQkFBTSxHQUFiLFVBQWMsSUFBYyxFQUFFLE1BQXNCO1FBQXRDLG9CQUFjLEdBQWQsU0FBYztRQUFFLHNCQUFzQixHQUF0QixhQUFzQjtRQUNsRCxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7WUFDM0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO1FBQ3ZFLENBQUM7UUFDRCxJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ1gsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN6QixDQUFDO1FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRU0sdUNBQWUsR0FBdEIsVUFBdUIsT0FBWTtRQUNqQyxHQUFHLENBQUMsQ0FBQyxJQUFJLFFBQVEsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLElBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUMsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sZ0NBQVEsR0FBZjtRQUNFLElBQUksT0FBTyxHQUFRLEVBQUUsQ0FBQztRQUN0QixHQUFHLENBQUMsQ0FBQyxJQUFJLFFBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzFCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBTyxJQUFLLENBQUMsUUFBUSxDQUFDLFlBQVksUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNsRixPQUFPLENBQUMsUUFBUSxDQUFDLEdBQVMsSUFBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzVDLENBQUM7UUFDSCxDQUFDO1FBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRU0sNkJBQUssR0FBWjtRQUNFLEVBQUUsQ0FBQyxDQUFPLElBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNqQixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDakIsQ0FBQztJQUNILENBQUM7SUFFTSwrQkFBTyxHQUFkO1FBQ0UsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFTSwrQkFBTyxHQUFkO1FBQ0UsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFTyx3Q0FBZ0IsR0FBeEIsVUFBeUIsV0FBbUI7UUFBNUMsaUJBZUM7UUFkQyxJQUFJLE9BQU8sR0FBUyxJQUFJLENBQUMsU0FBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pELEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0NBQW9DLFdBQVcsYUFBVSxDQUFDLENBQUM7WUFDekUsTUFBTSxDQUFDO1FBQ1QsQ0FBQztRQUNELElBQUksSUFBSSxHQUFHLENBQUMsV0FBVyxLQUFLLFFBQVEsQ0FBQyxHQUFHLEVBQUMsRUFBRSxFQUFRLElBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFOUYsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUN0QyxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDMUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsVUFBQSxJQUFJO1lBQzdCLEtBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sK0JBQU8sR0FBZjtRQUNFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUgsb0JBQUM7QUFBRCxDQUFDLEFBNUVELElBNEVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUeXBlfSBmcm9tICdAYW5ndWxhci9jb3JlL3NyYy90eXBlJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAnLi4vbmcyLXJlc291cmNlLXJlc3QnO1xuaW1wb3J0IHtSZXNvdXJjZU1vZGVsUGFyYW1zQmFzZX0gZnJvbSAnLi9JbnRlcmZhY2VzJztcbmltcG9ydCB7UmVzb3VyY2V9IGZyb20gJy4vUmVzb3VyY2UnO1xuaW1wb3J0IHttYXBUb01vZGVsfSBmcm9tICcuL1Jlc291cmNlQWN0aW9uJztcblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBSZXNvdXJjZU1vZGVsUGFyYW1zKHBhcmFtcz86IFJlc291cmNlTW9kZWxQYXJhbXNCYXNlKSB7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQ6IFR5cGU8UmVzb3VyY2VNb2RlbD4pIHtcbiAgICBsZXQgcHJvdmlkZXJzOiBhbnlbXSA9IFtdO1xuICAgIGlmIChwYXJhbXMpIHtcbiAgICAgIHByb3ZpZGVycyA9IHBhcmFtcy5wcm92aWRlcnMgfHwgW107XG4gICAgfVxuXG4gICAgKDxhbnk+UmVmbGVjdCkuZGVmaW5lTWV0YWRhdGEoJ3Byb3ZpZGVycycsIHByb3ZpZGVycywgdGFyZ2V0KTtcbiAgfTtcbn1cblxuXG5leHBvcnQgY2xhc3MgUmVzb3VyY2VNb2RlbCB7XG5cbiAgc3RhdGljIHJlc291cmNlQ2xhc3M6IFR5cGU8UmVzb3VyY2U+O1xuICBzdGF0aWMgcmVzb3VyY2VJbnN0YW5jZTogUmVzb3VyY2U7XG5cbiAgJHJlc29sdmVkOiBib29sZWFuO1xuICAkb2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxhbnk+O1xuICAkYWJvcnRSZXF1ZXN0OiAoKSA9PiB2b2lkO1xuICAkcHJpbWFyeUtleTogc3RyaW5nID0gJ2lkJztcbiAgJHJlc291cmNlOiBSZXNvdXJjZTtcblxuICBzdGF0aWMgY3JlYXRlKGRhdGE6IGFueSA9IHt9LCBjb21taXQ6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgaWYgKCF0aGlzLnJlc291cmNlSW5zdGFuY2UpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1lvdSBzaG91bGQgZmlyc3QgaW5zdGFudGlhdGUgUmVzb3VyY2UgYnkgaW5qZWN0aW5nLicpO1xuICAgIH1cbiAgICBsZXQgcmVzdWx0ID0gbWFwVG9Nb2RlbC5iaW5kKHRoaXMucmVzb3VyY2VJbnN0YW5jZSkoZGF0YSwgdGhpcyk7XG4gICAgaWYgKGNvbW1pdCkge1xuICAgICAgcmVzdWx0ID0gcmVzdWx0LnNhdmUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHB1YmxpYyAkZmlsbEZyb21PYmplY3QoX29iamVjdDogYW55KSB7XG4gICAgZm9yIChsZXQgcHJvcE5hbWUgaW4gX29iamVjdCkge1xuICAgICAgKDxhbnk+dGhpcylbcHJvcE5hbWVdID0gX29iamVjdFtwcm9wTmFtZV07XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljICRnZXREYXRhKCkge1xuICAgIGxldCBfb2JqZWN0OiBhbnkgPSB7fTtcbiAgICBmb3IgKGxldCBwcm9wTmFtZSBpbiB0aGlzKSB7XG4gICAgICBpZiAoISgoPGFueT50aGlzKVtwcm9wTmFtZV0gaW5zdGFuY2VvZiBGdW5jdGlvbikgJiYgIShwcm9wTmFtZS5jaGFyQXQoMCkgPT09ICckJykpIHtcbiAgICAgICAgX29iamVjdFtwcm9wTmFtZV0gPSAoPGFueT50aGlzKVtwcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfb2JqZWN0O1xuICB9XG5cbiAgcHVibGljICRzYXZlKCkge1xuICAgIGlmICgoPGFueT50aGlzKVt0aGlzLiRwcmltYXJ5S2V5XSkge1xuICAgICAgdGhpcy4kdXBkYXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGNyZWF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyAkdXBkYXRlKCkge1xuICAgIHRoaXMuJHJlc291cmNlX21ldGhvZCgndXBkYXRlJyk7XG4gIH1cblxuICBwdWJsaWMgJHJlbW92ZSgpIHtcbiAgICB0aGlzLiRyZXNvdXJjZV9tZXRob2QoJ3JlbW92ZScpO1xuICB9XG5cbiAgcHJpdmF0ZSAkcmVzb3VyY2VfbWV0aG9kKG1ldGhvZF9uYW1lOiBzdHJpbmcpIHtcbiAgICBsZXQgX21ldGhvZCA9ICg8YW55PnRoaXMuJHJlc291cmNlKVttZXRob2RfbmFtZV07XG4gICAgaWYgKCFfbWV0aG9kKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBZb3VyIFJlc291cmNlIGhhcyBubyBpbXBsZW1lbnRlZCAke21ldGhvZF9uYW1lfSBtZXRob2QuYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBkYXRhID0gKG1ldGhvZF9uYW1lID09PSAncmVtb3ZlJykgPyB7aWQ6ICg8YW55PnRoaXMpW3RoaXMuJHByaW1hcnlLZXldfSA6IHRoaXMuJGdldERhdGEoKTtcblxuICAgIGxldCByZXN1bHQgPSBfbWV0aG9kLmJpbmQodGhpcy4kcmVzb3VyY2UpKGRhdGEpO1xuICAgIHRoaXMuJHJlc29sdmVkID0gcmVzdWx0LiRyZXNvbHZlZDtcbiAgICB0aGlzLiRvYnNlcnZhYmxlID0gcmVzdWx0LiRvYnNlcnZhYmxlO1xuICAgIHRoaXMuJGFib3J0UmVxdWVzdCA9IHJlc3VsdC4kYWJvcnRSZXF1ZXN0O1xuICAgIHRoaXMuJG9ic2VydmFibGUuc3Vic2NyaWJlKHJlc3AgPT4ge1xuICAgICAgdGhpcy4kZmlsbEZyb21PYmplY3QocmVzcC4kZ2V0RGF0YSgpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgJGNyZWF0ZSgpIHtcbiAgICB0aGlzLiRyZXNvdXJjZV9tZXRob2QoJ2NyZWF0ZScpO1xuICB9XG5cbn1cbiJdfQ==