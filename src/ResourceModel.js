import { mapToModel } from './ResourceAction';
export function ResourceModelParams(params) {
    return function (target) {
        var providers = [];
        if (params) {
            providers = params.providers || [];
        }
        Reflect.defineMetadata('providers', providers, target);
    };
}
export var ResourceModel = (function () {
    function ResourceModel() {
        this.$primaryKey = 'id';
    }
    ResourceModel.create = function (data, commit) {
        if (data === void 0) { data = {}; }
        if (commit === void 0) { commit = true; }
        if (!this.resourceInstance) {
            console.error('You should first instantiate Resource by injecting.');
        }
        var result = mapToModel.bind(this.resourceInstance)(data, this);
        if (commit) {
            result = result.save();
        }
        return result;
    };
    ResourceModel.prototype.$fillFromObject = function (_object) {
        for (var propName in _object) {
            this[propName] = _object[propName];
        }
        return this;
    };
    ResourceModel.prototype.$getData = function () {
        var _object = {};
        for (var propName in this) {
            if (!(this[propName] instanceof Function) && !(propName.charAt(0) === '$')) {
                _object[propName] = this[propName];
            }
        }
        return _object;
    };
    ResourceModel.prototype.$save = function () {
        if (this[this.$primaryKey]) {
            this.$update();
        }
        else {
            this.$create();
        }
    };
    ResourceModel.prototype.$update = function () {
        this.$resource_method('update');
    };
    ResourceModel.prototype.$remove = function () {
        this.$resource_method('remove');
    };
    ResourceModel.prototype.$resource_method = function (method_name) {
        var _this = this;
        var _method = this.$resource[method_name];
        if (!_method) {
            console.error("Your Resource has no implemented " + method_name + " method.");
            return;
        }
        var data = (method_name === 'remove') ? { id: this[this.$primaryKey] } : this.$getData();
        var result = _method.bind(this.$resource)(data);
        this.$resolved = result.$resolved;
        this.$observable = result.$observable;
        this.$abortRequest = result.$abortRequest;
        this.$observable.subscribe(function (resp) {
            _this.$fillFromObject(resp.$getData());
        });
    };
    ResourceModel.prototype.$create = function () {
        this.$resource_method('create');
    };
    return ResourceModel;
}());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVzb3VyY2VNb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlJlc291cmNlTW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BSU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxrQkFBa0I7QUFHM0Msb0NBQW9DLE1BQWdDO0lBRWxFLE1BQU0sQ0FBQyxVQUFVLE1BQTJCO1FBQzFDLElBQUksU0FBUyxHQUFVLEVBQUUsQ0FBQztRQUMxQixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ1gsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDO1FBQ3JDLENBQUM7UUFFSyxPQUFRLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDaEUsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUdEO0lBQUE7UUFRRSxnQkFBVyxHQUFXLElBQUksQ0FBQztJQW9FN0IsQ0FBQztJQWpFUSxvQkFBTSxHQUFiLFVBQWMsSUFBYyxFQUFFLE1BQXNCO1FBQXRDLG9CQUFjLEdBQWQsU0FBYztRQUFFLHNCQUFzQixHQUF0QixhQUFzQjtRQUNsRCxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7WUFDM0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO1FBQ3ZFLENBQUM7UUFDRCxJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ1gsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN6QixDQUFDO1FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRU0sdUNBQWUsR0FBdEIsVUFBdUIsT0FBWTtRQUNqQyxHQUFHLENBQUMsQ0FBQyxJQUFJLFFBQVEsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLElBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUMsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sZ0NBQVEsR0FBZjtRQUNFLElBQUksT0FBTyxHQUFRLEVBQUUsQ0FBQztRQUN0QixHQUFHLENBQUMsQ0FBQyxJQUFJLFFBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzFCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBTyxJQUFLLENBQUMsUUFBUSxDQUFDLFlBQVksUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNsRixPQUFPLENBQUMsUUFBUSxDQUFDLEdBQVMsSUFBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzVDLENBQUM7UUFDSCxDQUFDO1FBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRU0sNkJBQUssR0FBWjtRQUNFLEVBQUUsQ0FBQyxDQUFPLElBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNqQixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDakIsQ0FBQztJQUNILENBQUM7SUFFTSwrQkFBTyxHQUFkO1FBQ0UsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFTSwrQkFBTyxHQUFkO1FBQ0UsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFTyx3Q0FBZ0IsR0FBeEIsVUFBeUIsV0FBbUI7UUFBNUMsaUJBZUM7UUFkQyxJQUFJLE9BQU8sR0FBUyxJQUFJLENBQUMsU0FBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pELEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0NBQW9DLFdBQVcsYUFBVSxDQUFDLENBQUM7WUFDekUsTUFBTSxDQUFDO1FBQ1QsQ0FBQztRQUNELElBQUksSUFBSSxHQUFHLENBQUMsV0FBVyxLQUFLLFFBQVEsQ0FBQyxHQUFHLEVBQUMsRUFBRSxFQUFRLElBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFOUYsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUN0QyxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDMUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsVUFBQSxJQUFJO1lBQzdCLEtBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sK0JBQU8sR0FBZjtRQUNFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUgsb0JBQUM7QUFBRCxDQUFDLEFBNUVELElBNEVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUeXBlfSBmcm9tICdAYW5ndWxhci9jb3JlL3NyYy90eXBlJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcbmltcG9ydCB7UmVzb3VyY2VNb2RlbFBhcmFtc0Jhc2V9IGZyb20gJy4vSW50ZXJmYWNlcyc7XG5pbXBvcnQge1Jlc291cmNlfSBmcm9tICcuL1Jlc291cmNlJztcbmltcG9ydCB7bWFwVG9Nb2RlbH0gZnJvbSAnLi9SZXNvdXJjZUFjdGlvbic7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIFJlc291cmNlTW9kZWxQYXJhbXMocGFyYW1zPzogUmVzb3VyY2VNb2RlbFBhcmFtc0Jhc2UpIHtcblxuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogVHlwZTxSZXNvdXJjZU1vZGVsPikge1xuICAgIGxldCBwcm92aWRlcnM6IGFueVtdID0gW107XG4gICAgaWYgKHBhcmFtcykge1xuICAgICAgcHJvdmlkZXJzID0gcGFyYW1zLnByb3ZpZGVycyB8fCBbXTtcbiAgICB9XG5cbiAgICAoPGFueT5SZWZsZWN0KS5kZWZpbmVNZXRhZGF0YSgncHJvdmlkZXJzJywgcHJvdmlkZXJzLCB0YXJnZXQpO1xuICB9O1xufVxuXG5cbmV4cG9ydCBjbGFzcyBSZXNvdXJjZU1vZGVsIHtcblxuICBzdGF0aWMgcmVzb3VyY2VDbGFzczogVHlwZTxSZXNvdXJjZT47XG4gIHN0YXRpYyByZXNvdXJjZUluc3RhbmNlOiBSZXNvdXJjZTtcblxuICAkcmVzb2x2ZWQ6IGJvb2xlYW47XG4gICRvYnNlcnZhYmxlOiBPYnNlcnZhYmxlPGFueT47XG4gICRhYm9ydFJlcXVlc3Q6ICgpID0+IHZvaWQ7XG4gICRwcmltYXJ5S2V5OiBzdHJpbmcgPSAnaWQnO1xuICAkcmVzb3VyY2U6IFJlc291cmNlO1xuXG4gIHN0YXRpYyBjcmVhdGUoZGF0YTogYW55ID0ge30sIGNvbW1pdDogYm9vbGVhbiA9IHRydWUpIHtcbiAgICBpZiAoIXRoaXMucmVzb3VyY2VJbnN0YW5jZSkge1xuICAgICAgY29uc29sZS5lcnJvcignWW91IHNob3VsZCBmaXJzdCBpbnN0YW50aWF0ZSBSZXNvdXJjZSBieSBpbmplY3RpbmcuJyk7XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSBtYXBUb01vZGVsLmJpbmQodGhpcy5yZXNvdXJjZUluc3RhbmNlKShkYXRhLCB0aGlzKTtcbiAgICBpZiAoY29tbWl0KSB7XG4gICAgICByZXN1bHQgPSByZXN1bHQuc2F2ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHVibGljICRmaWxsRnJvbU9iamVjdChfb2JqZWN0OiBhbnkpIHtcbiAgICBmb3IgKGxldCBwcm9wTmFtZSBpbiBfb2JqZWN0KSB7XG4gICAgICAoPGFueT50aGlzKVtwcm9wTmFtZV0gPSBfb2JqZWN0W3Byb3BOYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgJGdldERhdGEoKSB7XG4gICAgbGV0IF9vYmplY3Q6IGFueSA9IHt9O1xuICAgIGZvciAobGV0IHByb3BOYW1lIGluIHRoaXMpIHtcbiAgICAgIGlmICghKCg8YW55PnRoaXMpW3Byb3BOYW1lXSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSAmJiAhKHByb3BOYW1lLmNoYXJBdCgwKSA9PT0gJyQnKSkge1xuICAgICAgICBfb2JqZWN0W3Byb3BOYW1lXSA9ICg8YW55PnRoaXMpW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9vYmplY3Q7XG4gIH1cblxuICBwdWJsaWMgJHNhdmUoKSB7XG4gICAgaWYgKCg8YW55PnRoaXMpW3RoaXMuJHByaW1hcnlLZXldKSB7XG4gICAgICB0aGlzLiR1cGRhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kY3JlYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljICR1cGRhdGUoKSB7XG4gICAgdGhpcy4kcmVzb3VyY2VfbWV0aG9kKCd1cGRhdGUnKTtcbiAgfVxuXG4gIHB1YmxpYyAkcmVtb3ZlKCkge1xuICAgIHRoaXMuJHJlc291cmNlX21ldGhvZCgncmVtb3ZlJyk7XG4gIH1cblxuICBwcml2YXRlICRyZXNvdXJjZV9tZXRob2QobWV0aG9kX25hbWU6IHN0cmluZykge1xuICAgIGxldCBfbWV0aG9kID0gKDxhbnk+dGhpcy4kcmVzb3VyY2UpW21ldGhvZF9uYW1lXTtcbiAgICBpZiAoIV9tZXRob2QpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFlvdXIgUmVzb3VyY2UgaGFzIG5vIGltcGxlbWVudGVkICR7bWV0aG9kX25hbWV9IG1ldGhvZC5gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGRhdGEgPSAobWV0aG9kX25hbWUgPT09ICdyZW1vdmUnKSA/IHtpZDogKDxhbnk+dGhpcylbdGhpcy4kcHJpbWFyeUtleV19IDogdGhpcy4kZ2V0RGF0YSgpO1xuXG4gICAgbGV0IHJlc3VsdCA9IF9tZXRob2QuYmluZCh0aGlzLiRyZXNvdXJjZSkoZGF0YSk7XG4gICAgdGhpcy4kcmVzb2x2ZWQgPSByZXN1bHQuJHJlc29sdmVkO1xuICAgIHRoaXMuJG9ic2VydmFibGUgPSByZXN1bHQuJG9ic2VydmFibGU7XG4gICAgdGhpcy4kYWJvcnRSZXF1ZXN0ID0gcmVzdWx0LiRhYm9ydFJlcXVlc3Q7XG4gICAgdGhpcy4kb2JzZXJ2YWJsZS5zdWJzY3JpYmUocmVzcCA9PiB7XG4gICAgICB0aGlzLiRmaWxsRnJvbU9iamVjdChyZXNwLiRnZXREYXRhKCkpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSAkY3JlYXRlKCkge1xuICAgIHRoaXMuJHJlc291cmNlX21ldGhvZCgnY3JlYXRlJyk7XG4gIH1cblxufVxuIl19